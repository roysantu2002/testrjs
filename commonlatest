var fs = require('fs')
var os = require('os');
var {promisify} = require('util')
const { spawn } = require("child_process");
const replace = require('replace-in-file');

const { v4: uuidv4 } = require('uuid');

//var uniqueID =  // ? '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'

class common {

    constructor(path, dirname, uniqueID = "") {
        this.uniqueID = uuidv4();
        this.path = path
        this.dirname = dirname
    }

    runVBS() {
        const enter = spawn("C:\\Windows\\System32\\wscript.exe", ["C:\\Users\\t649598\\enter.vbs"]);
    }
    generateTestID() {
        return this.uniqueID;
    }

    createDir() {

        const directory = this.path;
        console.log(directory)

        if (!fs.existsSync(directory)) {
            fs.mkdirSync(directory);

        } else {
            console.log("Directory already exist");
        }

    }


    createFile(fileName) {
        // 

        var htmlContent = `
        <html><head><title>ARENA TEST AUTOMATION REPORT</title>
        <body>
        <table bordercolor=#99ccff border=1 cellpadding=3 cellspacing=3 style=font-family:arialfont-size:x-small width=60% align=center>
        <TH colspan=2 bgcolor = #F0F8FF><FONT COLOR=#000000><B><I>ARENA TEST AUTOMATION</I></B></TH></FONT>
        <tr>
        <td bgcolor=C0C0C0><B>Test Scope</B></td>
        <td>ARENA WORK FLOW TESTING</td>
        </tr>
        <tr><td bgcolor=C0C0C0><B>Date</B></td>
        <td>${new Date()}</td>
        </tr><tr>
         <td bgcolor=C0C0C0><B>Host OS</B></td>
         <td>${os.type}</td>
          </tr>
           <tr>
           <td bgcolor=C0C0C0><B>Host Name</B></td>
            <td>${os.hostname()}</td>
            </tr>
            <tr>
            <td bgcolor=C0C0C0><B>User Name</B></td>
            <td>  ${os.userInfo().username} </td>
            <tr>
            <td bgcolor=C0C0C0><B>Start Time</B></td>
             <td> ${new Date().getTime()} </td>
            </tr>
            <tr>
            <td bgcolor=C0C0C0><B>End Time</B></td>
             <td> ${new Date().getTime()} </td>
            </tr>
            <P><br><table bordercolor=#99ccff  border=1 cellpadding=1 cellspacing=1 style=font-family:arialfont-size:x-small width=100% align=center>
            <TH colspan=6 bgcolor = #F0F8FF><FONT COLOR=#000000><B><I>DETAILED EXECUTION REPORT(S)</I></B></TH></FONT>
            <TR><TD align=left bgcolor=C0C0C0 ><font size=2+ color=blue><B><I>Test Case ID</I></B></Font></TD>
            <TD align=left bgcolor=C0C0C0 ><font size=2+ color=blue><B><I>Test Scenario</I></B></Font></TD>
             <TD align=left bgcolor=C0C0C0 ><font size=2+ color=blue><B><I>Expected Result</I></B></Font></TD>
             <TD align=center bgcolor=C0C0C0><font size=2+ color=blue><B><I>Actual Result</I></B></font></TD>
              <TD align=center bgcolor=C0C0C0><font size=2+ color=blue><B><I>Screen</I></B></font></TD>
              <TD align=center bgcolor=C0C0C0><font size=2+  color=blue><B><I>STATUS</I></B></TD></font></TR>
              `;

        console.log(this.path + "\\" + fileName)
        fs.writeFile(this.path + "\\" + fileName + ".html", htmlContent, (error) => { /* handle error */ })

        //create JSON
    }
    // let current_datetime = new Date();
    // let formatted_date = current_datetime.getDate() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getFullYear();
    // const dirPath = "D:\\test-help\\" + formatted_date

    create_report_body(fileName, tcFlag, tcID, tcDescription, tcExpectedResult, tcActualResult, screenShot) {
        var outputTxt;
        switch (tcFlag) {

            case "PASSED":
                outputTxt = `
        <tr>
        <td>${tcID}</td>
        <td>${tcDescription}</td>
        <td>${tcExpectedResult}</td>
        <td>${tcActualResult}</td>
        <td>${screenShot}</td>
        <td><font color='green'>${tcFlag}</font></td>
        
        </tr>
        `;

                break;
            case "FAILED":
                outputTxt = `
            <tr>
            <td>${tcID}</td>
            <td>${tcDescription}</td>
            <td>${tcExpectedResult}</td>
            <td>${tcActualResult}</td>
            <td>${screenShot}</td>
            <td><font color='red'>${tcFlag}</font></td>
            
            </tr>
            `;
                break;
            case "ERROR":
                break;
            case "NORUN":
                break;
            default:
                console.log('logging')
        }
        fs.appendFile(this.path + "\\" + fileName + ".html", outputTxt, (error) => { /* handle error */ })
        this.createJSON(this.path + "\\" + fileName + ".json", tcFlag, tcID, tcDescription, tcExpectedResult, tcActualResult, screenShot)
    }

    //create JSON
    async createJSON(fileName, tcFlag, tcID, tcDescription, tcExpectedResult, tcActualResult, screenShot) {
        let testData = {
            tcID: tcID,
            flag: tcFlag,
            tcDescription: tcDescription,
            tcExpectedResult: tcExpectedResult,
            screenShot: screenShot
        };



        // fs.readFile(this.path + "\\" + "results.json", 'utf-8', function(err, data) {
        //     if (err) throw err;

        //     var newValue = data.replace(/aaaa/gim, 'name');

        //     fs.writeFile(this.path + "\\" + "results.json", newValue, 'utf-8', function(err, data) {
        //         if (err) throw err;
        //         console.log('Done!');
        //     })
        // })

        // const options = {
        //     files: this.path + "\\" + "results.json",
        //     from: /aaaa/g,
        //     to: 'sssssssssss',
        // };

       // if (fs.existsSync(this.path + "\\" + fileName + ".json")) {
        console.log(fileName)   
        if (fs.existsSync(fileName)) {
            fs.readFile(fileName, 'utf8', function (err, fileData) {
                console.log("Exists")
                if (err) {
                    console.log(er)
                }
                else {
                    var resultObj = JSON.parse(fileData);
                    resultObj.push(testData);
                    let data = JSON.stringify(resultObj, null, 2);
                    fs.writeFileSync(fileName, data, 'utf8', function (err) {
                        if (err) throw err;
                        console.log('Data written to file');

                    });
                    //const sleep = promisify (5)
                }

            });


        } else {
            console.log("Not exist")
            let data = JSON.stringify(testData, null, 2);
            fs.writeFileSync(fileName, "["+data+"]", function (err) {
                if (err) throw err;
                //console.log('Data written to file');
                //console.log("Directory already exist");
            });

            // fs.close(this.path + "\\" + fileName + ".json", function (err) {
            //     if (err) throw err;
            //     //console.log('Data written to file');
            //     //console.log("Directory already exist");
            // });

            // fs.readFile(this.path + "\\" + fileName + ".json", 'utf8', function (err, fileData) {
            //     if (err) {
            //         console.log(er)
            //     }
            //     else {
            //         resultObj = JSON.parse(fileData);
            //         resultObj.push(testdata);
            //         let data = JSON.stringify(resultObj, null, 2);
            //         fs.writeFile(this.path + "\\" + fileName + ".json", data, { flag: 'a' }, function (err) {
            //             if (err) throw err;
            //             console.log('Data written to file');
            //         });
            //     }

            // });

           
    }


        //fs.writeFileSync(this.path + "\\" + "results.json", data);

    }
    }


//let fileName = current_datetime.getFullYear() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getDate() + " " + current_datetime.getHours() + ":" + current_datetime.getMinutes() + ":" + current_datetime.getSeconds() + ".html"

// let fileNameTxt = current_datetime.getDate()  + "-" + (current_datetime.getMonth()+1) + "-" + current_datetime.getFullYear() + "-" + current_datetime.getHours() + "-" + current_datetime.getMinutes() + "-" + current_datetime.getSeconds() + ".html";
// //var path = String("D:/test-help", formatted_date);
// console.log(dirPath )

// createDir(dirPath, formatted_date);

// var testID = generateTestID()

// console.log(testID)

// var testID = generateTestID()

// console.log(testID)

// createFile(dirPath, fileNameTxt, "dateTime", "browserName")

module.exports = common;
